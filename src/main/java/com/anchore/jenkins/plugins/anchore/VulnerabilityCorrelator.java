package com.anchore.jenkins.plugins.anchore;

import com.anchore.jenkins.plugins.anchore.model.ImageVulnerability;
import com.anchore.jenkins.plugins.anchore.model.vdb.VulnerabilityDetails;
import com.anchore.jenkins.plugins.anchore.model.vdb.Object;
import com.fasterxml.jackson.databind.ObjectMapper;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.commons.compress.archivers.zip.ScatterZipOutputStream;
import org.apache.http.HttpEntity;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class VulnerabilityCorrelator {
    private final static String username = "ktorkura";
    private final static String apiKey = "f82261e36cde2b2de3e2ab7fbdef42cf77032d0f";
    private final static String userAgent = "Mozilla/5.0";

    private static String getCvssClassFromScore(double score) {
        if (score < 0.1)
            return "None";
        else if (score < 4.0)
            return "Low";
        else if (score < 7.0)
            return "Medium";
        else if (score < 9.0)
            return "High";
        else return "Critical";
    }

    private static String getUrl(String cveId) {
        return new StringBuilder("https://hpi-vdb.de/vulndb/api/vulnapi/reducedVulnerabilities/?format=json&username=")
                    .append(username)
                    .append("&api_key=")
                    .append(apiKey)
                    .append("&identifier=")
                    .append(cveId).toString();
    }

    private static VulnerabilityDetails queryVulnDB(String cveId) throws IOException {
        String url = getUrl(cveId);

        HttpClient client = HttpClientBuilder.create().build();
        HttpGet request = new HttpGet(url);
        request.addHeader("user-agent", userAgent);

        HttpEntity entity =  client.execute(request).getEntity();
        String responseString = EntityUtils.toString(entity, "UTF-8");
        return new ObjectMapper().readValue(responseString, VulnerabilityDetails.class);
    }

    private static ImageVulnerability correlate(String cveId, String imagename) throws IOException, IndexOutOfBoundsException {
        ImageVulnerability imageVulnerability = new ImageVulnerability();

        VulnerabilityDetails details = queryVulnDB(cveId);
        Object detailsObject = details.getObjects().get(0);

        imageVulnerability.setImagename(imagename);
        imageVulnerability.setTimestamp("");
        imageVulnerability.setAvailability(detailsObject.getAvailability());
        imageVulnerability.setConfidentiality(detailsObject.getConfidentiality());
        imageVulnerability.setCvssScore(detailsObject.getCvssScore());
        imageVulnerability.setCvssVector(detailsObject.getCvssVector());
        imageVulnerability.setCweId(detailsObject.getCweId());
        imageVulnerability.setIdentifier(detailsObject.getIdentifier());
        imageVulnerability.setIntegrity(detailsObject.getIntegrity());

        return imageVulnerability;
    }

    public static List<ImageVulnerability> correlateVulnerabilitiesFromJson(JSONObject vulnerabilities) {
        JSONArray data = vulnerabilities.getJSONArray("data");
        List<ImageVulnerability> imageVulnerabilities = new ArrayList<>();

        // correlate Vulnerabilities
        for (int i = 0; i < data.size(); i++) {
            JSONArray row = data.getJSONArray(i);
            String imagename = row.getString(0);
            String cveId = row.getString(1);

            try {
                ImageVulnerability vulnerability = VulnerabilityCorrelator.correlate(cveId, imagename);
                vulnerability.setCveId(cveId);
                vulnerability.setSeverity(getCvssClassFromScore(vulnerability.getCvssScore()));
                vulnerability.setVulnerabilityPackage(row.getString(3));
                vulnerability.setFixAvailable(row.getString(4));
                vulnerability.setUrl(row.getString(5));

                imageVulnerabilities.add(vulnerability);
            } catch (Exception e) { }
        }

        return imageVulnerabilities;
    }
}
