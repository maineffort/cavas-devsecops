package com.anchore.jenkins.plugins.anchore;

import com.anchore.jenkins.plugins.anchore.model.ImageVulnerabilityNewEntity;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class VulnerabilityDAO {
    private Connection connection;
    private static String connectionUrl = "jdbc:mysql://172.20.8.135:3306/cavas_slingshot?serverTimezone=Europe/Berlin";

    private void connect() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            connection = DriverManager.getConnection(connectionUrl, "csbauditor", "@broker777");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public Connection getConnection() {
        if (connection == null)
            connect();
        return connection;
    }

    public void closeConnection() {
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public void writeVulnerabilitiesFromJson(JSONObject vulnerabilities) {
        JSONArray data = vulnerabilities.getJSONArray("data");
        List<ImageVulnerabilityNewEntity> imagevulnerabilities = new ArrayList<>();

        try {
            Connection conn = getConnection();
            String[] columnNames = {"NAME", "CVEID"};
            PreparedStatement insertVulnerability = conn.prepareStatement("INSERT INTO ImageVulnerabilityNew VALUES (0, ?, ?)");

            conn.setAutoCommit(false);
            for (int i = 0; i < data.size(); i++) {
                JSONArray row = data.getJSONArray(i);
                insertVulnerability.setString(1, row.getString(0));
                insertVulnerability.setString(2, row.getString(1));
                insertVulnerability.addBatch();
            }
            insertVulnerability.executeBatch();
            conn.commit();
            closeConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
