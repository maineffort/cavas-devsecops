package com.anchore.jenkins.plugins.anchore;

import com.anchore.jenkins.plugins.anchore.model.ImageVulnerability;
import com.anchore.jenkins.plugins.anchore.model.security.AnchoreVulnerabilities;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import net.sf.json.JSONArray;
import net.sf.json.JSONException;
import net.sf.json.JSONObject;
import org.apache.commons.io.IOUtils;
import org.eclipse.jgit.lib.Constants;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class VulnerabilityDAOTest {
    static String readFile(String path, Charset encoding)
            throws IOException
    {
        byte[] encoded = Files.readAllBytes(Paths.get(path));
        return new String(encoded, encoding);
    }

    @Test
    public void testJson() throws IOException {
        InputStream stream = VulnerabilityDAOTest.class.getClassLoader().getResourceAsStream("vulnerabilities.json");
        String contents = IOUtils.toString(stream, StandardCharsets.UTF_8);
        JSONObject json = JSONObject.fromObject(contents);

        List<ImageVulnerability> imageVulnerabilities = VulnerabilityCorrelator.correlateVulnerabilitiesFromJson(json);
        AnchoreVulnerabilities vulnerabilities = new AnchoreVulnerabilities(imageVulnerabilities);
        String asString = new ObjectMapper().writeValueAsString(vulnerabilities);
        System.out.println(asString);
    }

    @Test
    public void testGit() throws IOException {
        Repository repository = new FileRepositoryBuilder().setGitDir(new File("simple-maven-project-with-tests/.git")).build();
        RevCommit commit = new RevWalk(repository).parseCommit(repository.resolve(Constants.HEAD));
        String abbreviated = commit.abbreviate(7).name();
        System.out.println(commit);
    }
}
